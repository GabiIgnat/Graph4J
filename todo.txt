https://github.com/jgrapht/jgrapht
https://github.com/kevin-wayne/algs4
https://github.com/jrtom/jung
https://github.com/google/guava/tree/master/guava/src/com/google/common/graph
https://github.com/google/guava/wiki/GraphsExplained


https://gephi.org/users/supported-graph-formats/

Python
https://networkx.org/
https://github.com/networkx/networkx/tree/main/networkx/algorithms

C++
BGL https://www.boost.org/doc/libs/1_80_0/libs/graph/doc/index.html

.NET
https://github.com/YaccConstructor/QuickGraph/tree/master/src/QuickGraph/Algorithms

NetworkX or the BGL. or Igraph
JGraphTâ€”A Java Library for Graph Data Structures and Algorithms https://arxiv.org/abs/1904.08355

R Plots
https://sites.harding.edu/fmccown/r/

FastUtils
https://github.com/vigna/fastutil

Linear regression
https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/LinearRegression.java.html

Comparatii legate de modul de rulare / performanta:
- crearea de grafuri (empty,random,complete)
- dfs, bfs
- conectivitate
- cicluri


Implementare de noi algoritmi

Shortest Paths:
	https://en.wikipedia.org/wiki/Johnson%27s_algorithm
Johnson's algorithm
	https://en.wikipedia.org/wiki/Johnson%27s_algorithm	
Finding the k-shortest path between two nodes
	https://cs.stackexchange.com/questions/18849/finding-the-k-shortest-path-between-two-nodes
	https://en.wikipedia.org/wiki/K_shortest_path_routing



For the Assignment Problem

Succesive shortest path algorithm
https://github.com/kevin-wayne/algs4/blob/master/src/main/java/edu/princeton/cs/algs4/AssignmentProblem.java

Hungarian algorithm ( Kuhn Munkres Minima lWeight Bipartite Perfect Matching)
https://en.wikipedia.org/wiki/Hungarian_algorithm
https://github.com/jgrapht/jgrapht/blob/master/jgrapht-core/src/main/java/org/jgrapht/alg/matching/KuhnMunkresMinimalWeightBipartitePerfectMatching.java
https://github.com/KevinStern/software-and-algorithms/blob/master/src/main/java/blogspot/software_and_algorithms/stern_library/optimization/HungarianAlgorithm.java


Jonker-Volgenant Algorithm for Linear Assignment Problem
R. Jonker and A. Volgenant, "A shortest augmenting path algorithm for dense and spare linear assignment problems"
https://github.com/yongyanghz/LAPJV-algorithm-c/blob/master/LAPJV/lap.cpp
https://www.mathworks.com/matlabcentral/fileexchange/26836-lapjv-jonker-volgenant-algorithm-for-linear-assignment-problem-v3-0




PageRank
https://en.wikipedia.org/wiki/PageRank
http://infolab.stanford.edu/~backrub/google.html
https://jgrapht.org/javadoc/org.jgrapht.core/org/jgrapht/alg/scoring/PageRank.html

MST
Boruvka Algorithm
	https://en.wikipedia.org/wiki/Bor%C5%AFvka%27s_algorithm
Randomized minimum spanning tree algorithm ?

Metrici si masuri specifice relatiilor sociale

Generaratoare de grafuri
OK k-regulate
	https://math.stackexchange.com/questions/142112/how-to-construct-a-k-regular-graph
	https://mediatum.ub.tum.de/doc/1315533/1315533.pdf

- care au o anumita secventa (di)grafica
	folosind fluxuri

Planarity


	Breadth First Search
	Depth First Search
Uniform Cost Search

	Dijkstra's Shortest Paths
	Bellman-Ford Shortest Paths
Johnson's All-Pairs Shortest Paths
	Kruskal's Minimum Spanning Tree
	Prim's Minimum Spanning Tree
	Connected Components
	Strongly Connected Components
Dynamic Connected Components (using Disjoint Sets)
	Topological Sort
	Transpose
Reverse Cuthill Mckee Ordering
Smallest Last Vertex Ordering
Sequential Vertex Coloring



    //graph
    //vertices=4n, degree=4n, adjList=4n+2*4m, adjPos=4n+2*4m 
    //vertexWeight=8n, edgeWeight=4n+2*8m
    //vertexLabel=4n, edgeLabel=4n+2*4m
    //
    //vertexIndex=4n
    //adjSet=n^2/64 ~ m
    //labelVertexMap=4n + 16n
    //labelEdgeMap=16m + 16m
    //
    //simple graph: 16n + 16m (adjPos true, adjSet false) OK    
    //simple with fast adjacency test: 16n + 17m OK
    //edge weighted graph: 20n + 32/33m  OK
    //edge labeled graph: 20n + 24/25m OK
    //vertex labeled graph:24n + 16m OK

    //
    //digraph
    //vertices=4n, degree=4n, indegree=4n, adjList = 4n+4m, predList=4n+4m, predPos=4n + 4m
    //vertexWeight=8n, edgeWeight=4n+8m
    //vertexLabel=4n, edgeLabel=4n+4m
    //simple digraph=24n + 12/13m OK
    //simple weighted digraph=28n + 20/21m OK
